import json
from typing import Union

import requests
from dotenv import dotenv_values
from logging import getLogger

# TODO review setup of logging
log = getLogger(__name__)


# TODO review if DOIs should continue to be reserved in local database!!!!

# TODO review where to store environment variables
# TODO test dataset that does not yet have a DOI
def reserve_draft_doi_datacite(metadata_record: dict) -> Union[str, None]:
    """Reserve a DOI identifer in "Draft" state with DataCite.

       If DOI not available from input metadata_record
        then new DOI generated by DataCite (using default EnviDat DOI suffix in config.)

       For DataCite documentation of this process see
       https://support.datacite.org/docs/api-create-dois#create-an-identifier-in-draft-state

    Args:
        metadata_record (dict): Individual EnviDat metadata entry record dictionary.

    Returns:
        str/None: DOI reserved in DataCite or None if DOI reservation failed
    """

    # Load config from environment vairables
    config = dotenv_values(".env")

    # Extract variables from config needed to call DataCite API
    try:
        api_url = config["DATACITE_API_URL"]
        client_id = config["DATACITE_CLIENT_ID"]
        password = config["DATACITE_PASSWORD"]
        doi_prefix = config["DOI_PREFIX"]  # TODO check this is correct
    except KeyError as e:
        log.exception(f'KeyError: {e} does not exist in config')
        raise

    payload = {
        "data": {
            "type": "dois",
            "attributes": {}
        }
    }

    # If DOI already exists then include it in payload
    doi = metadata_record.get("doi")
    if doi:
        payload["data"]["attributes"] = {
            "doi": doi
        }
    # Else instruct DataCite API to auto-generate DOI by only adding "prefix" attribute
    # to payload, this auto-generates a random DOI suffix
    else:
        payload["data"]["attributes"] = {
            "prefix": doi_prefix
        }

    # Convert payload to JSON and then send POST request to DataCite API
    payload_json = json.dumps(payload)
    headers = {"Content-Type": "application/vnd.api+json"}

    r = requests.post(api_url,
                      headers=headers,
                      auth=(client_id, password),
                      data=payload_json)

    # Return DOI
    if r.status_code == 201 or r.status_code == 200:
        reserved_doi = r.json().get('data').get('id')
        if reserved_doi:
            return reserved_doi
        else:
            log.error(f"Error cannot parse DOI from DataCite response: {r.json()}")
            return None
    else:
        log.error(f"Error reserving DOI on DataCite:  HTTP Code {r.status_code}")
        log.error(f"Error:{r.json()}")
        return None



