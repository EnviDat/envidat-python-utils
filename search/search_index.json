{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Utilities for EnviDat projects in Python. This site documents the APIs available classes and functions","title":"Home"},{"location":"#home","text":"Utilities for EnviDat projects in Python. This site documents the APIs available classes and functions","title":"Home"},{"location":"about/LICENCE/","text":"MIT License Copyright \u00a9 2020 Code Lighthouse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENCE"},{"location":"about/changelog/","text":"CHANGELOG \u00b6 0.3.3 (2022-05-23) \u00b6 Fix \u00b6 remove logging secret keys, bugfix endpoint var, remove default utf8 decode 0.3.2 (2022-05-23) \u00b6 Fix \u00b6 minor feat, add bucket cors set and get, plus restructure tests 0.3.1 (2022-05-19) \u00b6 Fix \u00b6 move get_url to utils, add favicon to s3 static website 0.3.0 (2022-05-19) \u00b6 Feat \u00b6 add s3 bucket functions to list directories 0.2.1 (2022-05-18) \u00b6 Fix \u00b6 cases where env vars are set after bucket class import 0.2.0 (2022-05-17) \u00b6 Feat \u00b6 add static website config funcs, fix existing funcs add s3 bucket class and api helper functions 0.1.0 (2022-05-16) \u00b6 Feat \u00b6 REDACTED","title":"CHANGELOG"},{"location":"about/changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"about/changelog/#033-2022-05-23","text":"","title":"0.3.3 (2022-05-23)"},{"location":"about/changelog/#fix","text":"remove logging secret keys, bugfix endpoint var, remove default utf8 decode","title":"Fix"},{"location":"about/changelog/#032-2022-05-23","text":"","title":"0.3.2 (2022-05-23)"},{"location":"about/changelog/#fix_1","text":"minor feat, add bucket cors set and get, plus restructure tests","title":"Fix"},{"location":"about/changelog/#031-2022-05-19","text":"","title":"0.3.1 (2022-05-19)"},{"location":"about/changelog/#fix_2","text":"move get_url to utils, add favicon to s3 static website","title":"Fix"},{"location":"about/changelog/#030-2022-05-19","text":"","title":"0.3.0 (2022-05-19)"},{"location":"about/changelog/#feat","text":"add s3 bucket functions to list directories","title":"Feat"},{"location":"about/changelog/#021-2022-05-18","text":"","title":"0.2.1 (2022-05-18)"},{"location":"about/changelog/#fix_3","text":"cases where env vars are set after bucket class import","title":"Fix"},{"location":"about/changelog/#020-2022-05-17","text":"","title":"0.2.0 (2022-05-17)"},{"location":"about/changelog/#feat_1","text":"add static website config funcs, fix existing funcs add s3 bucket class and api helper functions","title":"Feat"},{"location":"about/changelog/#010-2022-05-16","text":"","title":"0.1.0 (2022-05-16)"},{"location":"about/changelog/#feat_2","text":"REDACTED","title":"Feat"},{"location":"api/utils/","text":"\u00b6 load_dotenv_if_in_debug_mode \u00b6 source . load_dotenv_if_in_debug_mode ( env_file : Union [ Path , str ] ) Load secret .env variables from repo for debugging. Args env_file (Union[Path, str]) : String or Path like object pointer to secret dot env file to read. get_logger \u00b6 source . get_logger () Set logger parameters with log level from environment. Note Defaults to DEBUG level, unless specified by LOG_LEVEL env var. get_url \u00b6 source . get_url ( url : str ) Helper wrapper to get a URL with additional error handling. Args url (str) : The URL to GET. _debugger_is_active \u00b6 source . _debugger_is_active () Check to see if running in debug mode. Returns bool : if a debug trace is present or not.","title":"Utils"},{"location":"api/utils/#_1","text":"","title":""},{"location":"api/utils/#load_dotenv_if_in_debug_mode","text":"source . load_dotenv_if_in_debug_mode ( env_file : Union [ Path , str ] ) Load secret .env variables from repo for debugging. Args env_file (Union[Path, str]) : String or Path like object pointer to secret dot env file to read.","title":"load_dotenv_if_in_debug_mode"},{"location":"api/utils/#get_logger","text":"source . get_logger () Set logger parameters with log level from environment. Note Defaults to DEBUG level, unless specified by LOG_LEVEL env var.","title":"get_logger"},{"location":"api/utils/#get_url","text":"source . get_url ( url : str ) Helper wrapper to get a URL with additional error handling. Args url (str) : The URL to GET.","title":"get_url"},{"location":"api/utils/#_debugger_is_active","text":"source . _debugger_is_active () Check to see if running in debug mode. Returns bool : if a debug trace is present or not.","title":"_debugger_is_active"},{"location":"api/metadata/v1/","text":"\u00b6 get_metadata_list \u00b6 source . get_metadata_list ( host : str = None , sort_result : bool = None ) Get package/metadata list from API. Host url as a parameter or from environment. Args host (str) : API host url. Attempts to get from environment if omitted. Defaults to None sort_result (bool) : Sort result alphabetically by metadata name. Default to None Returns list : List of JSON formatted packages. get_metadata_list_with_resources \u00b6 source . get_metadata_list_with_resources ( host : str = None , sort_result : bool = None ) Get package/metadata list with associated resources from API. Host url as a parameter or from environment. Args host (str) : API host url. Attempts to get from environment if omitted. Defaults to None sort_result (bool) : Sort result alphabetically by metadata name. Default to None Note Limits results to 100000, otherwise returns only 10 results. Returns list : List of JSON formatted packages, with nested resources.","title":"V1"},{"location":"api/metadata/v1/#_1","text":"","title":""},{"location":"api/metadata/v1/#get_metadata_list","text":"source . get_metadata_list ( host : str = None , sort_result : bool = None ) Get package/metadata list from API. Host url as a parameter or from environment. Args host (str) : API host url. Attempts to get from environment if omitted. Defaults to None sort_result (bool) : Sort result alphabetically by metadata name. Default to None Returns list : List of JSON formatted packages.","title":"get_metadata_list"},{"location":"api/metadata/v1/#get_metadata_list_with_resources","text":"source . get_metadata_list_with_resources ( host : str = None , sort_result : bool = None ) Get package/metadata list with associated resources from API. Host url as a parameter or from environment. Args host (str) : API host url. Attempts to get from environment if omitted. Defaults to None sort_result (bool) : Sort result alphabetically by metadata name. Default to None Note Limits results to 100000, otherwise returns only 10 results. Returns list : List of JSON formatted packages, with nested resources.","title":"get_metadata_list_with_resources"},{"location":"api/s3/bucket/","text":"\u00b6 Bucket \u00b6 source Bucket ( bucket_name : str = None , is_new : bool = False , is_public : bool = False ) Class to handle S3 bucket transactions. Handles boto3 exceptions with custom exception classes. Methods: .create \u00b6 source . create () Create the S3 bucket on the endpoint. Method may be called directly to manipulate the boto3 Bucket object. Returns A boto3 S3 Bucket object. .get \u00b6 source . get ( key : str , response_content_type : str = None , decode : bool = False ) Get an object from the bucket into a memory object. Defaults to utf-8 decode, unless specified. Args key (str) : The key, i.e. path within the bucket to get. response_content_type (str) : Content type to enforce on the response. Defaults to None. decode (bool) : Decodes using utf-8 if set. Useful for text based files. Defaults to None. Returns tuple : (data, S3 Metadata dict). .put \u00b6 source . put ( key : str , data : Union [ str , bytes ], content_type : str = None , metadata : dict = {} ) Put an in memory object into the bucket. Args key (str) : The key, i.e. path within the bucket to store as. data (Union[str, bytes]) : The data to store, can be bytes or string. content_type (str) : The mime type to store the data as. E.g. important for binary data or html text. Defaults to None. metadata (dict) : Dictionary of metadata. E.g. timestamp or organisation details as string type. Defaults to None. Returns dict : Response dictionary from S3. .delete \u00b6 source . delete ( key : str ) Delete specified object of a given key. Args key (str) : The key, i.e. path within the bucket to delete. Returns dict : Response dictionary from S3. .upload_file \u00b6 source . upload_file ( key : str , local_filepath : Union [ str , Path ] ) Upload a local file to the bucket. Transparently manages multipart uploads. Args key (str) : The key, i.e. path within the bucket to store as. local_filepath (Union[str, Path]) : Path string or Pathlib object to upload. Returns bool : True if success, False is failure. .download_file \u00b6 source . download_file ( key : str , local_filepath : Union [ str , Path ] ) Download S3 object to a local file. Transparently manages multipart downloads. Args key (str) : The key, i.e. path within the bucket to download from. local_filepath (Union[str, Path]) : Path string or Pathlib object to upload. Returns bool : True if success, False is failure. .configure_static_website \u00b6 source . configure_static_website ( index_file : str = 'index.html' , error_file : str = 'error.html' , include_icon : bool = True ) Add static website hosting config to an S3 bucket. Note WARNING this will set all data to public read policy. Args index_file (str) : Name of index html file displaying page content. Defaults to 'index.html'. error_file (str) : Name of error html file displaying error content. Defaults to 'error.html'. include_icon (bool) : Include the envidat favicon.ico for the bucket. Defaults to True. Returns bool : True if success, False is failure. .generate_index_html \u00b6 source . generate_index_html ( title : str , file_list : Union [ list , str ], index_file : str = 'index.html' ) Write index file to root of S3 bucket, with embedded S3 download links. Args title (str) : HTML title tag for page. file_list (Union[list, str]) : List of file name to generate access urls for. index_file (str) : Name of index html file displaying page content. Defaults to 'index.html'. Returns dict : Response dictionary from index file upload. .list_all \u00b6 source . list_all () Get a list of all objects in the bucket. Returns list : List of s3.ObjectSummary dicts, containing object metadata. .list_dir \u00b6 source . list_dir ( path : str = '' , recursive : bool = False , file_type : str = '' , names_only : bool = False ) Get a list of all objects in a specific directory (s3 path). Returns up to a max of 1000 values. Args path (str) : The directory in the bucket. Defaults to root (\"\"). recursive (bool) : To list all objects and subdirectory objects recursively. Defaults to False. file_type (str) : File extension to filter by, e.g. 'txt' Defaults to blank string (\"\"). names_only (bool) : Remove file extensions and path, giving only the file name. Defaults to False. Returns list : List of s3.ObjectSummary dicts, containing object metadata. .get_cors_config \u00b6 source . get_cors_config () Get the CORS config for a bucket. Returns dict : Response dictionary containing CORS config. .set_cors_config \u00b6 source . set_cors_config ( origins : list = None , allow_all : bool = False ) Set the CORS config for a bucket. Args origins (list) : List of allowed origins in CORS headers. Defaults to None. allow_all (bool) : Allow all origins, set to wildcard *. Defaults to False Returns bool : True if success, False is failure.","title":"Bucket"},{"location":"api/s3/bucket/#_1","text":"","title":""},{"location":"api/s3/bucket/#bucket","text":"source Bucket ( bucket_name : str = None , is_new : bool = False , is_public : bool = False ) Class to handle S3 bucket transactions. Handles boto3 exceptions with custom exception classes. Methods:","title":"Bucket"},{"location":"api/s3/bucket/#create","text":"source . create () Create the S3 bucket on the endpoint. Method may be called directly to manipulate the boto3 Bucket object. Returns A boto3 S3 Bucket object.","title":".create"},{"location":"api/s3/bucket/#get","text":"source . get ( key : str , response_content_type : str = None , decode : bool = False ) Get an object from the bucket into a memory object. Defaults to utf-8 decode, unless specified. Args key (str) : The key, i.e. path within the bucket to get. response_content_type (str) : Content type to enforce on the response. Defaults to None. decode (bool) : Decodes using utf-8 if set. Useful for text based files. Defaults to None. Returns tuple : (data, S3 Metadata dict).","title":".get"},{"location":"api/s3/bucket/#put","text":"source . put ( key : str , data : Union [ str , bytes ], content_type : str = None , metadata : dict = {} ) Put an in memory object into the bucket. Args key (str) : The key, i.e. path within the bucket to store as. data (Union[str, bytes]) : The data to store, can be bytes or string. content_type (str) : The mime type to store the data as. E.g. important for binary data or html text. Defaults to None. metadata (dict) : Dictionary of metadata. E.g. timestamp or organisation details as string type. Defaults to None. Returns dict : Response dictionary from S3.","title":".put"},{"location":"api/s3/bucket/#delete","text":"source . delete ( key : str ) Delete specified object of a given key. Args key (str) : The key, i.e. path within the bucket to delete. Returns dict : Response dictionary from S3.","title":".delete"},{"location":"api/s3/bucket/#upload_file","text":"source . upload_file ( key : str , local_filepath : Union [ str , Path ] ) Upload a local file to the bucket. Transparently manages multipart uploads. Args key (str) : The key, i.e. path within the bucket to store as. local_filepath (Union[str, Path]) : Path string or Pathlib object to upload. Returns bool : True if success, False is failure.","title":".upload_file"},{"location":"api/s3/bucket/#download_file","text":"source . download_file ( key : str , local_filepath : Union [ str , Path ] ) Download S3 object to a local file. Transparently manages multipart downloads. Args key (str) : The key, i.e. path within the bucket to download from. local_filepath (Union[str, Path]) : Path string or Pathlib object to upload. Returns bool : True if success, False is failure.","title":".download_file"},{"location":"api/s3/bucket/#configure_static_website","text":"source . configure_static_website ( index_file : str = 'index.html' , error_file : str = 'error.html' , include_icon : bool = True ) Add static website hosting config to an S3 bucket. Note WARNING this will set all data to public read policy. Args index_file (str) : Name of index html file displaying page content. Defaults to 'index.html'. error_file (str) : Name of error html file displaying error content. Defaults to 'error.html'. include_icon (bool) : Include the envidat favicon.ico for the bucket. Defaults to True. Returns bool : True if success, False is failure.","title":".configure_static_website"},{"location":"api/s3/bucket/#generate_index_html","text":"source . generate_index_html ( title : str , file_list : Union [ list , str ], index_file : str = 'index.html' ) Write index file to root of S3 bucket, with embedded S3 download links. Args title (str) : HTML title tag for page. file_list (Union[list, str]) : List of file name to generate access urls for. index_file (str) : Name of index html file displaying page content. Defaults to 'index.html'. Returns dict : Response dictionary from index file upload.","title":".generate_index_html"},{"location":"api/s3/bucket/#list_all","text":"source . list_all () Get a list of all objects in the bucket. Returns list : List of s3.ObjectSummary dicts, containing object metadata.","title":".list_all"},{"location":"api/s3/bucket/#list_dir","text":"source . list_dir ( path : str = '' , recursive : bool = False , file_type : str = '' , names_only : bool = False ) Get a list of all objects in a specific directory (s3 path). Returns up to a max of 1000 values. Args path (str) : The directory in the bucket. Defaults to root (\"\"). recursive (bool) : To list all objects and subdirectory objects recursively. Defaults to False. file_type (str) : File extension to filter by, e.g. 'txt' Defaults to blank string (\"\"). names_only (bool) : Remove file extensions and path, giving only the file name. Defaults to False. Returns list : List of s3.ObjectSummary dicts, containing object metadata.","title":".list_dir"},{"location":"api/s3/bucket/#get_cors_config","text":"source . get_cors_config () Get the CORS config for a bucket. Returns dict : Response dictionary containing CORS config.","title":".get_cors_config"},{"location":"api/s3/bucket/#set_cors_config","text":"source . set_cors_config ( origins : list = None , allow_all : bool = False ) Set the CORS config for a bucket. Args origins (list) : List of allowed origins in CORS headers. Defaults to None. allow_all (bool) : Allow all origins, set to wildcard *. Defaults to False Returns bool : True if success, False is failure.","title":".set_cors_config"},{"location":"api/s3/exceptions/","text":"\u00b6 BucketException \u00b6 source BucketException ( message , bucket ) Parent class to be inherited for consistency. NoSuchKey \u00b6 source NoSuchKey ( key , bucket ) Exception for if bucket key does not exist. NoSuchBucket \u00b6 source NoSuchBucket ( bucket_name ) Exception for if bucket does not exist. BucketAlreadyExists \u00b6 source BucketAlreadyExists ( bucket_name ) Exception for if bucket already exists. BucketAccessDenied \u00b6 source BucketAccessDenied ( bucket_name ) Exception for if bucket access is denied. NoSuchCORSConfiguration \u00b6 source NoSuchCORSConfiguration ( bucket_name ) Exception for if the bucket does not have a CORS configuration. UnknownBucketException \u00b6 source UnknownBucketException ( bucket_name , e : ClientError ) Exception to catch all other unknown errors.","title":"Exceptions"},{"location":"api/s3/exceptions/#_1","text":"","title":""},{"location":"api/s3/exceptions/#bucketexception","text":"source BucketException ( message , bucket ) Parent class to be inherited for consistency.","title":"BucketException"},{"location":"api/s3/exceptions/#nosuchkey","text":"source NoSuchKey ( key , bucket ) Exception for if bucket key does not exist.","title":"NoSuchKey"},{"location":"api/s3/exceptions/#nosuchbucket","text":"source NoSuchBucket ( bucket_name ) Exception for if bucket does not exist.","title":"NoSuchBucket"},{"location":"api/s3/exceptions/#bucketalreadyexists","text":"source BucketAlreadyExists ( bucket_name ) Exception for if bucket already exists.","title":"BucketAlreadyExists"},{"location":"api/s3/exceptions/#bucketaccessdenied","text":"source BucketAccessDenied ( bucket_name ) Exception for if bucket access is denied.","title":"BucketAccessDenied"},{"location":"api/s3/exceptions/#nosuchcorsconfiguration","text":"source NoSuchCORSConfiguration ( bucket_name ) Exception for if the bucket does not have a CORS configuration.","title":"NoSuchCORSConfiguration"},{"location":"api/s3/exceptions/#unknownbucketexception","text":"source UnknownBucketException ( bucket_name , e : ClientError ) Exception to catch all other unknown errors.","title":"UnknownBucketException"}]}